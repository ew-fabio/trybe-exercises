# Realize o exerc√≠cio utilizando TDD: implemente os testes e depois a fun√ß√£o üß™

# Fa√ßa uma fun√ß√£o que valide um e-mail, lan√ßando uma exce√ß√£o quando o valor
# for inv√°lido. Endere√ßos de e-mail v√°lidos devem seguir as seguintes regras:

# Devem seguir o formato nomeusuario@nomewebsite.extensao;

# O nome de usu√°rio deve conter somente letras, d√≠gitos, tra√ßos e
# underscores (_);

# O nome de usu√°rio deve iniciar com uma letra;

# O nome do website deve conter somente letras e d√≠gitos;

# O tamanho m√°ximo da extens√£o √© de 3 caracteres.

# ü¶ú As fun√ß√µes isalpha, isdigit e isnumeric podem ser utilizadas para verificar
# se uma letra ou palavra s√£o compostas de somente caracteres ou d√≠gitos.

# Exemplo:
# "1".isalpha() -> False , "a".isalpha() -> True, "123".isnumeric() -> True.


def validate_email(email):
    if not email[0].isalpha():
        raise ValueError("O nome de usu√°rio deve iniciar com uma letra")

    username = email.split("@")[0].replace("-", "").replace("_", "")
    if not username.isalnum():
        raise ValueError(
            "O nome de usu√°rio deve conter somente letras, "
            "d√≠gitos, tra√ßos e underscores (_)"
        )

    website_name = email.split("@")[1].split(".")[0]
    if not website_name.isalnum():
        raise ValueError(
            "O nome do website deve conter somente letras e d√≠gitos"
        )

    if len(email.split(".")[-1]) > 3:
        raise ValueError("O tamanho m√°ximo da extens√£o √© de 3 caracteres")

    return None
